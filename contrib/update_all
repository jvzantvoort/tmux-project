#!/bin/bash
#===============================================================================
#
#         FILE:  update_all
#
#        USAGE:  update_all
#
#  DESCRIPTION:  Bash script
#
#      OPTIONS:  ---
# REQUIREMENTS:  ---
#         BUGS:  ---
#        NOTES:  ---
#       AUTHOR:  jvzantvoort (John van Zantvoort), john@vanzantvoort.org
#      COMPANY:  JDC
#      CREATED:  2024-07-14
#
# Copyright (C) 2024 John van Zantvoort
#
#===============================================================================

# Variables: switchable {{{
declare DEBUG="yes"
# }}}

# Constants: Screen measurements {{{
# Get screenwidth
SCREENWIDTH="$(tput cols)"
SCREENWIDTH="$((SCREENWIDTH-(SCREENWIDTH%40)))"
[[ "${SCREENWIDTH}" -lt 80 ]] && SCREENWIDTH=80

SCREENWIDTH="$((SCREENWIDTH-20))"
MSG_PADSTR_LEN="${SCREENWIDTH}"
MSG_FORMAT="%-${SCREENWIDTH}s [ %s%-7s%s ]\n"

unset SCREENWIDTH

readonly MSG_PADSTR_LEN
readonly MSG_FORMAT
# }}}

# Constants: Screen colors {{{
COLOR_RED=$(tput -Tansi setaf 1)
COLOR_GREEN=$(tput -Tansi setaf 2)
COLOR_GREY=$(tput -Tansi setaf 072)
COLOR_YELLOW=$(tput -Tansi setaf 11)
COLOR_ORANGE=$(tput -Tansi setaf 208)
COLOR_RESET=$(tput -Tansi sgr0)

readonly COLOR_RED
readonly COLOR_GREEN
readonly COLOR_GREY
readonly COLOR_YELLOW
readonly COLOR_ORANGE
readonly COLOR_RESET
# }}}

# Functions: messages {{{
#shellcheck disable=SC2034
function strrep() { for x in $(seq 1 "${1}"); do printf "-"; done; }

function print_msg()
{
  local color=$1; shift
  local state=$1; shift
  local msg="$*"
  local pad
  pad="${#msg}" # length of the string
  pad="$((MSG_PADSTR_LEN-pad))" # subtract it from then screen width
  padstr="$(strrep "${pad}")" # create padding

  #shellcheck disable=SC2059
  printf "${MSG_FORMAT}" "$msg ${padstr}" "${color}" "${state}" "${COLOR_RESET}"
}
function print_title()   { print_msg "${COLOR_GREY}"   "-------" "$@"; }
function print_ok()      { print_msg "${COLOR_GREEN}"  "SUCCESS" "$@"; }
function print_nok()     { print_msg "${COLOR_RED}"    "FAILURE" "$@"; }
function print_fatal()   { print_msg "${COLOR_RED}"    "FATAL"   "$@"; }
function print_warning() { print_msg "${COLOR_ORANGE}" "WARNING" "$@"; }
function print_unknown() { print_msg "${COLOR_YELLOW}" "UNKNOWN" "$@"; }
function print_debug()
{
  [[ "${DEBUG}" != "yes" ]] && return 0
  printf "%s%s%s\n" "${COLOR_GREY}" "$*" "${COLOR_RESET}"
}

function test_result()
{
  local retv=$1
  local message=$2
  if [[ "${retv}" == "0" ]]
  then
    print_ok "${message}"
  else
    print_nok "${message}"
  fi
}

function test_result_with_log()
{
  local retv=$1
  local message=$2
  local extra=$3
  local logfile=$4

  if [[ "${retv}" == "0" ]]
  then
    print_ok "${message}"
  else
    print_nok "${message}"

    printf "\n# repo: %s\n" "${extra}" >> "${STAGING_AREA}/main.log"
    printf "\n%s\n" "${message}"       >> "${STAGING_AREA}/main.log"
    cat "${logfile}"                   >> "${STAGING_AREA}/main.log"
    printf "\n\n"                      >> "${STAGING_AREA}/main.log"
  fi

  rm -f "$logfile"
}

function retv_fatal()
{
  local retv=$1
  local message=$2
  if [[ "${retv}" == "0" ]]
  then
    print_ok "${message}"
  else
    print_fatal "${message}"
    exit 1
  fi
}

function die() { retv_fatal 1 "FATAL: $1"; }

function err127()
{
  which "$1" >/dev/null 2>&1
  retv_fatal "$?" "Command $1 is available"
}

# }}}

function make_staging_area()
{
  local retv

  STAGING_AREA="$(mktemp -d "git.XXXXXXXXXXX")"
  STAGING_AREA="$(readlink -f "${STAGING_AREA}")" # make it absolute etc.
  retv="$?"

  [[ "${retv}" == 0 ]] || die "Failed to create tempdir: error code ${retv}"

}

function make_temp() { mktemp --tmpdir="${STAGING_AREA}" "log.XXXXXX"; }

function clean_staging_area()
{
  [[ -z "${STAGING_AREA}" ]] && return
  [[ -d "${STAGING_AREA}" ]] || return
  rm -rf "${STAGING_AREA}" || die "Failed to cleanup tempdir: ${STAGING_AREA}"
  unset STAGING_AREA
}

function list_branches()
{
  git branch -a --format="%(refname:short)" -r | sed 's,^origin\/,,'|grep -v "^origin$"
}

function main_branch()
{
  local branches=($(list_branches))

  for branch in "${branches[@]}"
  do
    case "$branch" in
      main) echo "${branch}" ; return ;;
      master) echo "${branch}" ; return ;;
      development) echo "${branch}" ; return ;;
    esac
  done
}

function update_repo()
{
  local target="$1"
  local title="${target//${PROJDIR}\/}"

  print_title "${target//${PROJDIR}\/}"

  pushd "${target}" >/dev/null 2>&1

  logfile="$(make_temp)"
  mainbranch="$(main_branch)"

  orgbranch="$(git rev-parse --abbrev-ref HEAD 2>/dev/null)"

  stash_count="$(git status -s | awk 'END { print NR }')"

  if [[ "${stash_count}" != "0" ]]
  then
    git stash >"${logfile}" 2>&1
    test_result_with_log "$?" "  git stash" "${title}" "${logfile}"
  fi

  if [[ "${orgbranch}" != "${mainbranch}" ]]
  then
    git pull origin "${orgbranch}" --tags >"${logfile}" 2>&1
    test_result_with_log "$?" "  git pull ${orgbranch}" "${title}" "${logfile}"

    git checkout "${mainbranch}" >"${logfile}" 2>&1
    test_result_with_log "$?" "  git checkout ${mainbranch}" "${title}" "${logfile}"
  fi

  git pull origin "${mainbranch}" --tags >"${logfile}" 2>&1
  test_result_with_log "$?" "  git pull ${mainbranch}" "${title}" "${logfile}"

  git fetch -p >"${logfile}" 2>&1
  test_result_with_log "$?" "  git fetch" "${title}" "${logfile}"

  if [[ "${orgbranch}" != "${mainbranch}" ]]
  then
    git checkout "${orgbranch}" >"${logfile}" 2>&1
    test_result_with_log "$?" "  git checkout ${orgbranch}" "${title}" "${logfile}"
    behind="$(git rev-list --left-right --count ${mainbranch}...${orgbranch} | awk '$1 != 0 { printf "behind %d commits", $1 }')"
    if [[ -n "${behind}" ]]
    then
      print_warning "${behind}"
    fi
  fi


  if [[ "${stash_count}" != "0" ]]
  then
    git stash pop >"${logfile}" 2>&1
    test_result_with_log "$?" "  git stash pop" "${title}" "${logfile}"
  fi
  popd >/dev/null 2>&1

}

#------------------------------------------------------------------------------#
#                                    Main                                      #
#------------------------------------------------------------------------------#

[[ -z "${PROJDIR}" ]] && die "this is not a project"
[[ -z "${SSH_AUTH_SOCK}" ]] && print_warning "no agent provided"

make_staging_area

find "${PROJDIR}" -type d -name .git -printf "%h\n"|while read -r target
do
  update_repo "${target}"
done

if [[ -f "${STAGING_AREA}/main.log" ]]
then
  cat "${STAGING_AREA}/main.log"
fi

clean_staging_area

#------------------------------------------------------------------------------#
#                                  The End                                     #
#------------------------------------------------------------------------------#
# vim: foldmethod=marker

// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/config.yml (278B)
// templates/default.env (314B)
// templates/default.rc (230B)

package projecttype

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesConfigYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xcc\xb1\x0a\xc2\x30\x10\x80\xe1\x3d\x4f\x71\x14\x27\x21\xed\x52\x1c\xb2\x4a\x17\x07\x2d\x52\x10\x17\x21\x24\x57\x8c\x6d\x93\x90\x5c\x15\x29\xf5\xd9\xa5\xea\x54\x1d\xdc\xff\xff\xe3\x9c\x33\x1f\xdc\x05\x15\xd1\xdd\xa3\x80\x72\xbf\xdb\x14\xeb\xaa\x3a\x96\x05\xbb\xb9\xd0\x68\x13\x04\x3c\xb2\x83\x0b\x4d\xf4\x52\x61\x36\x0c\x69\xf9\x1e\xb6\xb2\xc3\x71\x64\x5e\x12\x61\xb0\x02\x4e\xe9\x72\xc1\x22\x52\xef\xa5\x22\xe3\x6c\x14\x0c\x80\x03\xaa\xb3\x83\xaf\xab\x36\x2d\x7e\x02\x2b\x3b\x14\xa0\xb1\x96\x7d\x4b\x29\xda\x2b\x03\x00\xd0\x18\xc9\x58\x39\x41\x02\x92\xf9\x3f\x65\xc9\xab\xeb\x9c\x46\x01\xab\x3c\xff\x61\x05\xf5\x0f\x15\xd4\x5c\x7a\x06\x00\x00\xff\xff\xba\x5a\xac\x4f\x16\x01\x00\x00")

func templatesConfigYmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesConfigYml,
		"templates/config.yml",
	)
}

func templatesConfigYml() (*asset, error) {
	bytes, err := templatesConfigYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/config.yml", size: 278, mode: os.FileMode(0664), modTime: time.Unix(1661162498, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x77, 0x43, 0x7d, 0x75, 0xe4, 0x56, 0xc6, 0xa0, 0x40, 0xbf, 0xb4, 0x41, 0x8f, 0x99, 0xbe, 0x65, 0x59, 0x3f, 0xdc, 0x9b, 0xa3, 0xcd, 0x2a, 0x26, 0xa4, 0x76, 0x2, 0xe1, 0xa3, 0xfc, 0xd8, 0x86}}
	return a, nil
}

var _templatesDefaultEnv = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x90\xc1\x4e\x02\x41\x0c\x86\xef\xf3\x14\x15\x38\xe8\xa1\xcc\x62\x62\x62\x4c\xbc\x18\x2e\x7a\x91\xf0\x02\x66\x99\x2d\xcc\xc8\x32\x1d\xa7\x1d\x76\x91\xec\xbb\x1b\x74\xd5\x5b\xf3\xb5\x4d\xfe\xef\x9f\x5e\xd9\x4d\x88\x76\x53\x8b\x37\x86\xfa\xc4\x59\x61\xb5\x7e\x7d\x59\x3e\xaf\x1f\x27\xe7\xf3\x7c\x95\xf9\x9d\x9c\x2e\x43\x1e\x86\x89\x31\xdb\x12\x9d\x06\x8e\x20\xa4\x25\xbd\x89\xe7\x74\x7d\x63\xce\x06\x40\x0f\xa5\x07\x49\x6d\x50\xec\x42\x6c\xb8\x03\x3c\xfe\xe2\x4c\x12\x3e\x09\x53\x1d\x09\xf0\x04\x8b\x0a\x50\x61\xf1\xf7\x44\x2d\x39\x1d\xb7\x0a\x95\x19\x8c\x99\xc2\x53\x2d\xd4\x00\x47\xf0\xaa\x49\x1e\xac\x2d\x31\xf4\x73\xd1\xda\xed\xa9\x77\xbe\x8e\x3b\x9a\x3b\x3e\xd8\x8f\x42\x72\x49\x24\xf6\xae\xba\xad\xee\xad\xe7\x0e\x95\xf1\xe7\x02\xd5\x13\x76\x9c\xf7\x21\xee\xb0\x09\x99\x9c\x72\x3e\x21\x6f\x31\xc4\x23\x7f\x53\xf1\xd4\xb6\x58\xe4\x32\xd7\x28\x2e\x87\xa4\xff\x9a\xc9\x35\xa3\x9f\x6b\x60\x36\x16\x63\x67\x0b\x33\x98\xaf\x00\x00\x00\xff\xff\xa7\x49\xf7\xee\x3a\x01\x00\x00")

func templatesDefaultEnvBytes() ([]byte, error) {
	return bindataRead(
		_templatesDefaultEnv,
		"templates/default.env",
	)
}

func templatesDefaultEnv() (*asset, error) {
	bytes, err := templatesDefaultEnvBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/default.env", size: 314, mode: os.FileMode(0664), modTime: time.Unix(1661162498, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf8, 0xbb, 0x73, 0x3, 0x34, 0x4a, 0x6d, 0x95, 0xc1, 0xa0, 0x9c, 0xfd, 0x78, 0xb, 0x6e, 0x39, 0x13, 0x5b, 0x6f, 0x6b, 0xdd, 0x6e, 0x1, 0x3a, 0x94, 0x5f, 0x58, 0x31, 0xfa, 0x7a, 0x5f, 0xa3}}
	return a, nil
}

var _templatesDefaultRc = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xcd\xcf\x8a\x83\x30\x10\x06\xf0\x7b\x9e\x22\xe8\xd9\xe4\xbe\xd7\x75\x61\x65\x61\x15\x5b\xe8\x51\xd2\x38\x62\xda\x24\x13\xf2\x87\xb6\x48\xde\xbd\xc4\x9e\x7a\xe9\x5c\x86\xe1\xfb\x0d\x5f\x4d\x69\xfb\x73\xf8\x1e\xbb\xe1\xd8\xf5\xff\x5f\x94\x6e\x1b\x1b\x3c\x5e\x40\xc6\x16\x82\xf4\xca\x45\x85\x36\x67\x52\xd3\x7d\x4e\xfd\xf8\xd7\x76\xe3\x3b\x54\x3e\x67\x42\x02\x26\x2f\xa1\x59\x94\x86\x12\xfe\xa2\x81\x3d\xe1\xec\x2c\xc2\xca\xa3\x49\x77\x36\x73\x89\xc6\xa0\x65\x5e\x12\x9f\x6c\x13\x56\xd0\x9a\x56\x05\x7c\xf8\x29\x6b\x42\x17\xa7\x57\x05\x2d\x77\x13\x57\x30\xe0\x84\xbc\x72\x87\x37\xf0\x5a\x59\xe0\x33\x2c\x22\xe9\xc8\xe5\x43\x58\x56\xd4\x8e\x2a\xf2\x0c\x00\x00\xff\xff\x2a\xea\x70\x0b\xe6\x00\x00\x00")

func templatesDefaultRcBytes() ([]byte, error) {
	return bindataRead(
		_templatesDefaultRc,
		"templates/default.rc",
	)
}

func templatesDefaultRc() (*asset, error) {
	bytes, err := templatesDefaultRcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/default.rc", size: 230, mode: os.FileMode(0664), modTime: time.Unix(1661162498, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x62, 0x27, 0xff, 0x59, 0x43, 0x5a, 0xda, 0x73, 0xd6, 0x4a, 0x2a, 0x3b, 0x73, 0x24, 0xc, 0x6, 0x9, 0xe7, 0x98, 0xfb, 0x83, 0xf3, 0xec, 0x40, 0x88, 0x61, 0xc2, 0xf2, 0xba, 0x32, 0x5a, 0xf}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/config.yml":  templatesConfigYml,
	"templates/default.env": templatesDefaultEnv,
	"templates/default.rc":  templatesDefaultRc,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": {nil, map[string]*bintree{
		"config.yml": {templatesConfigYml, map[string]*bintree{}},
		"default.env": {templatesDefaultEnv, map[string]*bintree{}},
		"default.rc": {templatesDefaultRc, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}

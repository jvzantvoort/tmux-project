package projecttype

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _templates_config_yml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xcc\xb1\x0a\xc2\x30\x10\x80\xe1\x3d\x4f\x71\x14\x27\x21\xed\x52\x1c\xb2\x4a\x17\x07\x2d\x52\x10\x17\x21\x24\x57\x8c\x6d\x93\x90\x5c\x15\x29\xf5\xd9\xa5\xea\x54\x1d\xdc\xff\xff\xe3\x9c\x33\x1f\xdc\x05\x15\xd1\xdd\xa3\x80\x72\xbf\xdb\x14\xeb\xaa\x3a\x96\x05\xbb\xb9\xd0\x68\x13\x04\x3c\xb2\x83\x0b\x4d\xf4\x52\x61\x36\x0c\x69\xf9\x1e\xb6\xb2\xc3\x71\x64\x5e\x12\x61\xb0\x02\x4e\xe9\x72\xc1\x22\x52\xef\xa5\x22\xe3\x6c\x14\x0c\x80\x03\xaa\xb3\x83\xaf\xab\x36\x2d\x7e\x02\x2b\x3b\x14\xa0\xb1\x96\x7d\x4b\x29\xda\x2b\x03\x00\xd0\x18\xc9\x58\x39\x41\x02\x92\xf9\x3f\x65\xc9\xab\xeb\x9c\x46\x01\xab\x3c\xff\x61\x05\xf5\x0f\x15\xd4\x5c\x7a\x06\x00\x00\xff\xff\xba\x5a\xac\x4f\x16\x01\x00\x00")

func templates_config_yml() ([]byte, error) {
	return bindata_read(
		_templates_config_yml,
		"templates/config.yml",
	)
}

var _templates_default_env = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x90\xc1\x4e\x02\x41\x0c\x86\xef\xf3\x14\x15\x38\xe8\xa1\xcc\x62\x62\x62\x4c\xbc\x18\x2e\x7a\x91\xf0\x02\x66\x99\x2d\xcc\xc8\x32\x1d\xa7\x1d\x76\x91\xec\xbb\x1b\x74\xd5\x5b\xf3\xb5\x4d\xfe\xef\x9f\x5e\xd9\x4d\x88\x76\x53\x8b\x37\x86\xfa\xc4\x59\x61\xb5\x7e\x7d\x59\x3e\xaf\x1f\x27\xe7\xf3\x7c\x95\xf9\x9d\x9c\x2e\x43\x1e\x86\x89\x31\xdb\x12\x9d\x06\x8e\x20\xa4\x25\xbd\x89\xe7\x74\x7d\x63\xce\x06\x40\x0f\xa5\x07\x49\x6d\x50\xec\x42\x6c\xb8\x03\x3c\xfe\xe2\x4c\x12\x3e\x09\x53\x1d\x09\xf0\x04\x8b\x0a\x50\x61\xf1\xf7\x44\x2d\x39\x1d\xb7\x0a\x95\x19\x8c\x99\xc2\x53\x2d\xd4\x00\x47\xf0\xaa\x49\x1e\xac\x2d\x31\xf4\x73\xd1\xda\xed\xa9\x77\xbe\x8e\x3b\x9a\x3b\x3e\xd8\x8f\x42\x72\x49\x24\xf6\xae\xba\xad\xee\xad\xe7\x0e\x95\xf1\xe7\x02\xd5\x13\x76\x9c\xf7\x21\xee\xb0\x09\x99\x9c\x72\x3e\x21\x6f\x31\xc4\x23\x7f\x53\xf1\xd4\xb6\x58\xe4\x32\xd7\x28\x2e\x87\xa4\xff\x9a\xc9\x35\xa3\x9f\x6b\x60\x36\x16\x63\x67\x0b\x33\x98\xaf\x00\x00\x00\xff\xff\xa7\x49\xf7\xee\x3a\x01\x00\x00")

func templates_default_env() ([]byte, error) {
	return bindata_read(
		_templates_default_env,
		"templates/default.env",
	)
}

var _templates_default_rc = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xcd\xcf\x8a\x83\x30\x10\x06\xf0\x7b\x9e\x22\xe8\xd9\xe4\xbe\xd7\x75\x61\x65\x61\x15\x5b\xe8\x51\xd2\x38\x62\xda\x24\x13\xf2\x87\xb6\x48\xde\xbd\xc4\x9e\x7a\xe9\x5c\x86\xe1\xfb\x0d\x5f\x4d\x69\xfb\x73\xf8\x1e\xbb\xe1\xd8\xf5\xff\x5f\x94\x6e\x1b\x1b\x3c\x5e\x40\xc6\x16\x82\xf4\xca\x45\x85\x36\x67\x52\xd3\x7d\x4e\xfd\xf8\xd7\x76\xe3\x3b\x54\x3e\x67\x42\x02\x26\x2f\xa1\x59\x94\x86\x12\xfe\xa2\x81\x3d\xe1\xec\x2c\xc2\xca\xa3\x49\x77\x36\x73\x89\xc6\xa0\x65\x5e\x12\x9f\x6c\x13\x56\xd0\x9a\x56\x05\x7c\xf8\x29\x6b\x42\x17\xa7\x57\x05\x2d\x77\x13\x57\x30\xe0\x84\xbc\x72\x87\x37\xf0\x5a\x59\xe0\x33\x2c\x22\xe9\xc8\xe5\x43\x58\x56\xd4\x8e\x2a\xf2\x0c\x00\x00\xff\xff\x2a\xea\x70\x0b\xe6\x00\x00\x00")

func templates_default_rc() ([]byte, error) {
	return bindata_read(
		_templates_default_rc,
		"templates/default.rc",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"templates/config.yml": templates_config_yml,
	"templates/default.env": templates_default_env,
	"templates/default.rc": templates_default_rc,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"templates": &_bintree_t{nil, map[string]*_bintree_t{
		"config.yml": &_bintree_t{templates_config_yml, map[string]*_bintree_t{
		}},
		"default.env": &_bintree_t{templates_default_env, map[string]*_bintree_t{
		}},
		"default.rc": &_bintree_t{templates_default_rc, map[string]*_bintree_t{
		}},
	}},
}}

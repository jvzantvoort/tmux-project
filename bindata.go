// Code generated by go-bindata. DO NOT EDIT.
// sources:
// messages/bash (1.386kB)
// messages/usage_archive (96B)
// messages/usage_create (92B)
// messages/usage_edit (76B)
// messages/usage_list (96B)
// messages/usage_listfiles (125B)
// messages/usage_projectinit (73B)
// messages/usage_shell (192B)

package tmuxproject

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _messagesBash = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x54\x61\x6f\xd3\x30\x10\xfd\xee\x5f\xf1\x70\xa3\x75\x45\x72\xd3\x54\x6c\x12\x54\x41\x20\x54\x04\x1f\xba\x49\x74\x48\x48\xd5\x54\x79\xce\x65\x35\xb8\x4e\x15\x27\xdb\xa0\x0b\xbf\x1d\xb9\x75\x69\x3b\x5a\xc1\x77\xfc\x29\xce\x7b\xf7\xce\xf7\xec\xbb\xd6\xb3\xf8\x46\xdb\xf8\x46\xba\x19\x63\x93\x09\x78\x24\x38\xd2\x9f\xd0\xb8\xbe\xc6\xe3\x23\x4a\xaa\xea\xd2\x7a\x44\xfc\x00\x8f\xae\x46\x9f\xbf\x70\x0f\x9d\x9c\x6c\x20\xd6\x72\x33\x32\x46\xcd\x48\x7d\x43\xa6\x9d\xbc\x31\x94\x8e\xdf\xf5\x93\xb3\x33\x96\x91\x32\xb2\x24\x88\x07\x8c\x87\xe3\xf1\xc7\xcb\x8b\x8b\xb7\xa3\x61\x1a\x9d\x56\xf3\xfa\xc1\x93\x17\x46\x7e\x17\x73\x72\x4e\xde\x12\xc4\x02\xed\xd6\xb8\x0d\xf4\x5f\xc7\x19\xdd\xc5\xb6\x36\xa6\x73\x4c\x3f\xe9\xbd\xec\x31\x9d\x63\x02\x91\x83\x47\x1f\x2e\x47\xc3\xb8\xeb\xcb\x88\xbd\x76\x37\x8b\xa3\xe5\x4e\xca\xa6\x4b\xf6\x8e\xe3\x9a\x55\x33\xb2\x0c\x70\x45\x5d\x2a\xc2\xbf\x06\xb2\x5c\x33\x96\xd7\x56\x55\xba\xb0\x98\x4e\x3d\x73\x31\x35\xee\xb4\xc3\x96\x0c\x58\x55\x63\x1c\xc4\x7b\xb4\x5b\x4b\x47\xce\xe9\xc2\x4e\xad\x9c\x53\xd3\xde\x2d\x86\x35\x07\x54\xb4\x0d\x2a\xa6\x50\xd2\x80\x18\x90\x17\x25\x08\xda\x82\x47\xcb\x37\xaf\xfa\x0d\x1f\x20\x2b\xb0\xba\x1d\xe2\x48\x53\xf0\x28\xd9\xbf\x05\xf4\x3c\xc5\xfa\xe0\xf0\x23\x39\x98\x4c\x56\x95\x54\xb3\xbd\x84\xe1\xb8\xbf\xf7\xaa\xb0\xb9\xbe\xcd\xb5\x21\xe6\x8d\x5a\xa3\x69\x94\x0c\x18\x76\xb0\x94\x47\x4b\x6f\x5d\xf3\xd4\xbb\x10\xd0\x74\x4b\xc5\xbd\xc0\x24\x5c\xd0\x72\x1b\xdb\xf0\xf0\xb8\xfe\x2a\x97\x51\x2e\x6b\x53\x6d\xb4\xae\x86\x9f\x46\x29\x77\xaa\x24\xb2\xa2\x7f\x76\xae\x0a\x53\x94\x7c\x6d\xff\x81\x24\xeb\x62\x21\x32\x88\xca\x83\x9b\xa3\xf1\x83\xd6\x58\xba\xff\x4f\x7c\xb1\x74\x0f\xe1\x8e\x3b\x52\x92\xab\xe7\x74\xc4\x0c\x25\x1d\x21\x4a\xa0\xfd\x06\x30\xee\xd1\x68\x57\x4d\x03\xc1\x75\x56\x59\xc5\xa2\x2c\xbe\x92\xaa\xe0\x31\x88\x7c\x30\x58\x91\x9f\x77\x9e\xf8\xe6\xd7\x66\xb4\x6c\x0f\xb3\xff\xb2\x93\xc0\x3b\x32\x66\x7a\x2f\xce\x03\x41\xe7\x3b\x3d\xb5\x2f\x18\x9d\x6e\x7b\xb6\x13\xe8\x61\x12\xac\xd7\x7e\x7f\xec\x5b\xb3\x66\x90\x71\xf4\x07\xdd\x3b\x79\x80\x9b\xeb\xf0\xb1\xaa\x9b\x9c\x54\xac\x61\xbf\x02\x00\x00\xff\xff\xad\xd9\xa6\x60\x6a\x05\x00\x00")

func messagesBashBytes() ([]byte, error) {
	return bindataRead(
		_messagesBash,
		"messages/bash",
	)
}

func messagesBash() (*asset, error) {
	bytes, err := messagesBashBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "messages/bash", size: 1386, mode: os.FileMode(0664), modTime: time.Unix(1609557958, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9c, 0x94, 0xdc, 0x3c, 0x88, 0x98, 0xf8, 0xd, 0x92, 0x3c, 0xd5, 0x4d, 0xc4, 0x4, 0xdb, 0x24, 0x71, 0x24, 0x50, 0x0, 0xec, 0xcc, 0x7c, 0x62, 0xb9, 0x7, 0xdd, 0xb0, 0xf2, 0x21, 0x2b, 0x63}}
	return a, nil
}

var _messagesUsage_archive = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x2c\x4a\xce\xc8\x2c\x4b\x55\x48\x54\x28\x28\xca\xcf\x4a\x4d\x2e\xe1\xe2\x4a\x84\x0a\x45\xeb\x96\xc5\x2a\x44\xeb\x26\xd6\x40\x05\xf2\x12\x73\x53\x15\x6c\x90\x38\x76\xb1\x0a\xba\x79\x0a\x35\x0a\xba\x50\xad\x10\x05\x48\x1c\x3b\x05\x2e\x40\x00\x00\x00\xff\xff\xe7\x9a\xee\x67\x60\x00\x00\x00")

func messagesUsage_archiveBytes() ([]byte, error) {
	return bindataRead(
		_messagesUsage_archive,
		"messages/usage_archive",
	)
}

func messagesUsage_archive() (*asset, error) {
	bytes, err := messagesUsage_archiveBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "messages/usage_archive", size: 96, mode: os.FileMode(0664), modTime: time.Unix(1609532582, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xcd, 0xca, 0x84, 0x4d, 0x4f, 0xa6, 0xde, 0x22, 0x56, 0xca, 0xa5, 0x47, 0x76, 0x16, 0x4a, 0xc0, 0xbc, 0x36, 0xea, 0x5e, 0xbc, 0x7a, 0x83, 0xb9, 0xf2, 0x8f, 0xaf, 0x8d, 0x60, 0x7f, 0x19, 0x9c}}
	return a, nil
}

var _messagesUsage_create = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x2e\x4a\x4d\x2c\x49\x55\x48\x54\xc8\x4b\x2d\x57\x28\x28\xca\xcf\x4a\x4d\x2e\xd1\xe3\xe2\x4a\x86\x08\x47\xeb\x96\xd4\xe8\x42\x45\x4b\x2a\x0b\x52\x15\x6c\x40\xa4\x5d\xac\x82\x6e\x9e\x82\x4d\x5e\x62\x6e\xaa\x9d\x42\x8d\x02\x4c\x01\x88\x0f\x13\x8d\xd6\x2d\x8b\xe5\x02\x04\x00\x00\xff\xff\xf0\x64\x3d\x02\x5c\x00\x00\x00")

func messagesUsage_createBytes() ([]byte, error) {
	return bindataRead(
		_messagesUsage_create,
		"messages/usage_create",
	)
}

func messagesUsage_create() (*asset, error) {
	bytes, err := messagesUsage_createBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "messages/usage_create", size: 92, mode: os.FileMode(0664), modTime: time.Unix(1609532582, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6b, 0xbd, 0x87, 0x53, 0x8e, 0xa6, 0xe5, 0xac, 0xa1, 0x1c, 0x4e, 0xb7, 0x92, 0x8f, 0x6b, 0xe1, 0xe8, 0x8, 0x53, 0x44, 0xad, 0x3f, 0xbe, 0x12, 0x9b, 0x4, 0x92, 0x39, 0xc6, 0x8e, 0xde, 0x7a}}
	return a, nil
}

var _messagesUsage_edit = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x4d\xc9\x2c\x51\x48\x54\x28\x28\xca\xcf\x4a\x4d\x2e\x29\x56\x48\xcd\x2b\xcb\x2c\xca\xcf\xcb\x4d\xcd\x2b\x51\x48\xcc\x4b\x51\x28\xc9\x2d\xad\x50\x48\xce\xcf\x4b\xcb\x4c\x4f\xcb\xcc\x49\xe5\xe2\x4a\x05\x69\xd0\xcd\x53\xb0\x81\x6a\xc9\x4b\xcc\x4d\xb5\x53\x88\xd6\x2d\x8b\xe5\x02\x04\x00\x00\xff\xff\x87\x41\x86\x7c\x4c\x00\x00\x00")

func messagesUsage_editBytes() ([]byte, error) {
	return bindataRead(
		_messagesUsage_edit,
		"messages/usage_edit",
	)
}

func messagesUsage_edit() (*asset, error) {
	bytes, err := messagesUsage_editBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "messages/usage_edit", size: 76, mode: os.FileMode(0664), modTime: time.Unix(1609532582, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x97, 0x68, 0x22, 0x4d, 0x74, 0xb9, 0xcd, 0xc5, 0x7b, 0x92, 0x76, 0xe4, 0x93, 0xda, 0x34, 0xb, 0x15, 0xeb, 0x46, 0xbe, 0x7b, 0xf3, 0x4b, 0xd7, 0x47, 0x20, 0x3a, 0xb2, 0x35, 0xeb, 0xa8, 0x9}}
	return a, nil
}

var _messagesUsage_list = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x0a\xc9\x48\x55\x50\xca\xc9\x2c\x2e\x51\x52\x48\xce\xcf\xcd\x4d\xcc\x4b\x51\x00\xf1\x14\x0a\x8a\xf2\xb3\x52\x93\x4b\x8a\x15\x92\x4b\x8b\x8a\x8a\x52\xf3\x4a\x72\x2a\x15\x92\xf3\xf3\xd2\x32\xd3\x4b\x8b\x52\x53\xb8\xb8\xc0\x8a\xa2\x75\xa1\xca\xf2\x12\x73\x53\x6b\x74\xf3\x14\x6c\x40\x0c\xbb\x58\x85\x68\xdd\x32\x08\xc1\x05\x08\x00\x00\xff\xff\xbc\x87\x8c\xe4\x60\x00\x00\x00")

func messagesUsage_listBytes() ([]byte, error) {
	return bindataRead(
		_messagesUsage_list,
		"messages/usage_list",
	)
}

func messagesUsage_list() (*asset, error) {
	bytes, err := messagesUsage_listBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "messages/usage_list", size: 96, mode: os.FileMode(0664), modTime: time.Unix(1609532582, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x91, 0x6f, 0xd6, 0xd5, 0xd2, 0xae, 0xf5, 0x5f, 0x25, 0x58, 0xf4, 0x17, 0xfb, 0xce, 0x2, 0xfd, 0x8f, 0xd0, 0x14, 0x74, 0xd5, 0xf1, 0x16, 0xf9, 0xd0, 0x71, 0x92, 0x2d, 0x1a, 0x10, 0x43, 0x5d}}
	return a, nil
}

var _messagesUsage_listfiles = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x8c\x41\x0a\x02\x31\x0c\x45\xf7\x3d\xc5\x67\x36\xae\xea\x09\xc4\x53\xb8\x1b\x66\x51\x6a\xc6\x89\xb4\x89\x24\x19\x41\xf0\xf0\x52\x50\x77\x9f\xff\x1e\xef\xb2\x11\xa6\xc6\x1e\x2b\x37\xf2\x09\x55\x7b\x2f\x72\xc5\xb8\x1c\xb1\x11\x1e\xa6\x77\xaa\xe1\xa8\xbb\x99\x91\x44\x7b\x81\x05\xe5\x07\x0e\x9e\xaa\xca\xca\xb7\xdd\x4a\xb0\xca\x31\xa5\x7f\x0f\x73\xfe\x5a\x52\x3a\xbd\xb3\xe0\x34\xc6\x79\xc1\x9c\x9f\x4b\xfa\x04\x00\x00\xff\xff\xfc\x94\x84\xaa\x7d\x00\x00\x00")

func messagesUsage_listfilesBytes() ([]byte, error) {
	return bindataRead(
		_messagesUsage_listfiles,
		"messages/usage_listfiles",
	)
}

func messagesUsage_listfiles() (*asset, error) {
	bytes, err := messagesUsage_listfilesBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "messages/usage_listfiles", size: 125, mode: os.FileMode(0664), modTime: time.Unix(1609936047, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xcc, 0x78, 0x7e, 0x66, 0xb3, 0xa2, 0x74, 0xdd, 0x93, 0xe1, 0x9b, 0xc7, 0xae, 0x72, 0xa1, 0x70, 0x32, 0xd8, 0x86, 0xed, 0xd0, 0x5f, 0x3b, 0x55, 0x79, 0x5b, 0x50, 0x96, 0xe7, 0xa8, 0x5f, 0x76}}
	return a, nil
}

var _messagesUsage_projectinit = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xf2\xcc\xcb\x2c\xc9\x4c\xcc\xc9\xac\x4a\x55\x48\x54\xc8\x4b\x2d\x57\x28\x28\xca\xcf\x4a\x4d\x2e\x51\x28\xa9\x2c\x48\xe5\xe2\xca\xcc\xcb\x2c\x51\x88\xd6\x2d\x8b\x55\xd0\x2d\x51\xa8\x51\xd0\x85\xca\x82\x24\x15\x6c\x90\x38\x76\x5c\x80\x00\x00\x00\xff\xff\xda\x9f\xd3\xa8\x49\x00\x00\x00")

func messagesUsage_projectinitBytes() ([]byte, error) {
	return bindataRead(
		_messagesUsage_projectinit,
		"messages/usage_projectinit",
	)
}

func messagesUsage_projectinit() (*asset, error) {
	bytes, err := messagesUsage_projectinitBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "messages/usage_projectinit", size: 73, mode: os.FileMode(0664), modTime: time.Unix(1609532582, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x18, 0xfa, 0xc6, 0x80, 0x1b, 0x3e, 0xa9, 0x84, 0x4, 0xc3, 0x3c, 0xf, 0xf5, 0x3e, 0xd2, 0x7b, 0xb6, 0x20, 0x63, 0x6f, 0x75, 0x1, 0x26, 0x92, 0x2c, 0xcf, 0x90, 0xd1, 0x6, 0x3d, 0xe8, 0x36}}
	return a, nil
}

var _messagesUsage_shell = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\x31\x8e\xc3\x30\x0c\x04\x7b\xbd\x62\x61\x5c\x61\x17\xf6\x0b\x0e\x07\x5c\x93\x4f\x04\x29\xe8\x88\xb2\x14\xd0\xa2\x21\xd1\x89\x8b\x3c\x3e\xb0\xba\x74\x43\x62\x31\xbb\xff\x22\xfa\xaa\xb0\x75\x3f\xc6\xad\xe8\x83\xef\x06\x53\xcc\x8c\x94\x8d\x97\x42\xc6\x1e\x29\x83\x50\x23\x8b\x4c\xb8\x68\x01\x1f\xb4\x6e\xc2\x08\x5a\x30\x53\x8d\x20\xef\x61\x91\x5d\xd0\x53\x97\xf2\x72\x3a\x2c\x32\xb6\xa2\x21\x09\xa3\x6f\xb1\x54\xdb\xd3\x73\xa0\x5d\x6c\x98\x9c\x03\xf8\x49\x82\xee\xa7\xff\x5a\xd0\xba\x86\xce\xb9\x06\xb8\x8e\x15\x6f\x8c\xed\xc8\xb4\x32\x7e\x1b\xfe\xdd\x9c\xfb\x04\x00\x00\xff\xff\x60\x29\xe9\x14\xc0\x00\x00\x00")

func messagesUsage_shellBytes() ([]byte, error) {
	return bindataRead(
		_messagesUsage_shell,
		"messages/usage_shell",
	)
}

func messagesUsage_shell() (*asset, error) {
	bytes, err := messagesUsage_shellBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "messages/usage_shell", size: 192, mode: os.FileMode(0664), modTime: time.Unix(1609557958, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd6, 0x3c, 0x6f, 0x27, 0x2b, 0x94, 0x27, 0x87, 0xea, 0x8, 0x9a, 0xea, 0x5, 0x5e, 0xa2, 0xe9, 0x44, 0x46, 0xeb, 0xca, 0xa, 0x5, 0x8e, 0x46, 0xff, 0x56, 0x54, 0x59, 0x89, 0x1f, 0xa2, 0xbc}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"messages/bash":              messagesBash,
	"messages/usage_archive":     messagesUsage_archive,
	"messages/usage_create":      messagesUsage_create,
	"messages/usage_edit":        messagesUsage_edit,
	"messages/usage_list":        messagesUsage_list,
	"messages/usage_listfiles":   messagesUsage_listfiles,
	"messages/usage_projectinit": messagesUsage_projectinit,
	"messages/usage_shell":       messagesUsage_shell,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"messages": {nil, map[string]*bintree{
		"bash":              {messagesBash, map[string]*bintree{}},
		"usage_archive":     {messagesUsage_archive, map[string]*bintree{}},
		"usage_create":      {messagesUsage_create, map[string]*bintree{}},
		"usage_edit":        {messagesUsage_edit, map[string]*bintree{}},
		"usage_list":        {messagesUsage_list, map[string]*bintree{}},
		"usage_listfiles":   {messagesUsage_listfiles, map[string]*bintree{}},
		"usage_projectinit": {messagesUsage_projectinit, map[string]*bintree{}},
		"usage_shell":       {messagesUsage_shell, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}

// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/config.yml (261B)
// templates/default.env (321B)
// templates/default.rc (230B)

package config

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesConfigYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xcc\xb1\xaa\xc2\x30\x14\x80\xe1\x3d\x4f\x71\x28\x77\xba\x90\xde\xa5\xdc\x21\xab\x74\x71\xd0\x22\x05\x71\x11\x42\x72\x8a\xb1\x6d\x12\x4e\x4e\x15\x29\xf5\xd9\xa5\xea\x54\x1c\xdc\xff\xff\x93\x52\x8a\x48\xe1\x8c\x86\xf9\x16\x51\x41\xb5\xdb\xae\xcb\x55\x5d\x1f\xaa\x52\x5c\x03\xb5\xd6\x91\x82\xfb\xdf\x3e\x50\x9b\xa2\x36\x28\xa2\x66\x46\xf2\x0a\x8e\xf9\xef\x8f\x48\xc8\x43\xd4\x86\x5d\xf0\x49\x09\x00\x09\x68\x4e\x01\xc6\x31\xaf\x5e\xea\x46\xf7\x38\x4d\xa2\x71\x1d\xbe\x03\xaf\x7b\x54\x60\xb1\xd1\x43\xc7\x39\xfa\x8b\x00\x00\xb0\x98\xd8\x79\x3d\x43\x0a\xb2\xe5\x3f\x67\xd9\xb3\xeb\x83\x45\x05\xff\x45\xf1\xc1\x22\xf3\x0d\x45\x66\x29\x3d\x02\x00\x00\xff\xff\x37\x43\x35\xdf\x05\x01\x00\x00")

func templatesConfigYmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesConfigYml,
		"templates/config.yml",
	)
}

func templatesConfigYml() (*asset, error) {
	bytes, err := templatesConfigYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/config.yml", size: 261, mode: os.FileMode(0664), modTime: time.Unix(1609532582, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x55, 0x45, 0x8, 0xf5, 0xc7, 0x8c, 0x3, 0x84, 0x20, 0x4f, 0xcd, 0xa6, 0xae, 0x1, 0xd4, 0x72, 0x28, 0x57, 0x46, 0xbe, 0x3b, 0xf5, 0xb9, 0xb7, 0x27, 0xbe, 0x7f, 0x5b, 0x52, 0x2a, 0x90, 0x93}}
	return a, nil
}

var _templatesDefaultEnv = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x90\xb1\x4e\x03\x31\x0c\x86\xf7\x3c\x85\x69\x3b\xc0\xe0\xe6\x8a\x84\x84\x90\x58\x50\x07\x60\x01\x75\x61\x44\x69\xce\x6d\xa2\x5e\xe3\x10\xfb\x7a\x57\xaa\x7b\x77\x54\x38\x60\xb3\x3e\xdb\xd2\xff\xfd\xd3\x0b\xbb\x8e\xc9\xae\x9d\x04\x63\xa8\xcf\x5c\x14\x5e\x57\x2f\xcf\xcb\xa7\xd5\xfd\xe4\x74\x9a\x3f\xf2\x9e\x96\xb1\x0c\x83\x7d\xe3\xb2\x93\xec\x3c\x4d\x8c\xd9\xb4\xc9\x6b\xe4\x04\x42\xda\xe6\x77\x09\x9c\x2f\xaf\xcc\xc9\x00\xe8\xbe\xed\x41\x72\x13\x15\xbb\x98\x6a\xee\x00\x0f\xbf\xb8\x90\xc4\x4f\xc2\xec\x12\x01\x1e\x61\x51\x01\x2a\x2c\xfe\x9e\xa8\x21\xaf\xe3\x56\xa1\x32\x83\x31\x53\x78\x70\x42\x35\x70\x82\xa0\x9a\xe5\xce\xda\x36\xc5\x7e\x2e\xea\xfc\x8e\x7a\x1f\x5c\xda\xd2\xdc\xf3\xde\x7e\xb4\x24\xe7\x44\x62\x6f\xaa\xeb\xea\xd6\x06\xee\x50\x19\x7f\x2e\x50\x03\x61\xc7\x65\x17\xd3\x16\xeb\x58\xc8\x2b\x97\x23\xf2\x06\x63\x3a\xf0\x37\x95\x40\x4d\x83\xad\x9c\x67\x87\xe2\x4b\xcc\xfa\xaf\x99\x7d\x3d\xfa\xf9\x1a\x66\x63\x3f\x76\xb6\x30\x83\xf9\x0a\x00\x00\xff\xff\x12\x3c\xb5\xef\x41\x01\x00\x00")

func templatesDefaultEnvBytes() ([]byte, error) {
	return bindataRead(
		_templatesDefaultEnv,
		"templates/default.env",
	)
}

func templatesDefaultEnv() (*asset, error) {
	bytes, err := templatesDefaultEnvBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/default.env", size: 321, mode: os.FileMode(0664), modTime: time.Unix(1609532582, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8f, 0x66, 0x5f, 0xb9, 0x21, 0x68, 0x52, 0x44, 0xd3, 0x8a, 0x65, 0x13, 0xe5, 0x24, 0xef, 0xd8, 0x47, 0x7c, 0x4b, 0xba, 0xf8, 0x8f, 0x60, 0x2b, 0xf4, 0xd2, 0x9f, 0xe8, 0xd, 0x16, 0x21, 0x9d}}
	return a, nil
}

var _templatesDefaultRc = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xcd\xcf\x8a\x83\x30\x10\x06\xf0\x7b\x9e\x22\xe8\xd9\xe4\xbe\xd7\x75\x61\x65\x61\x15\x5b\xe8\x51\xd2\x38\x62\xda\x24\x13\xf2\x87\xb6\x48\xde\xbd\xc4\x9e\x7a\xe9\x5c\x86\xe1\xfb\x0d\x5f\x4d\x69\xfb\x73\xf8\x1e\xbb\xe1\xd8\xf5\xff\x5f\x94\x6e\x1b\x1b\x3c\x5e\x40\xc6\x16\x82\xf4\xca\x45\x85\x36\x67\x52\xd3\x7d\x4e\xfd\xf8\xd7\x76\xe3\x3b\x54\x3e\x67\x42\x02\x26\x2f\xa1\x59\x94\x86\x12\xfe\xa2\x81\x3d\xe1\xec\x2c\xc2\xca\xa3\x49\x77\x36\x73\x89\xc6\xa0\x65\x5e\x12\x9f\x6c\x13\x56\xd0\x9a\x56\x05\x7c\xf8\x29\x6b\x42\x17\xa7\x57\x05\x2d\x77\x13\x57\x30\xe0\x84\xbc\x72\x87\x37\xf0\x5a\x59\xe0\x33\x2c\x22\xe9\xc8\xe5\x43\x58\x56\xd4\x8e\x2a\xf2\x0c\x00\x00\xff\xff\x2a\xea\x70\x0b\xe6\x00\x00\x00")

func templatesDefaultRcBytes() ([]byte, error) {
	return bindataRead(
		_templatesDefaultRc,
		"templates/default.rc",
	)
}

func templatesDefaultRc() (*asset, error) {
	bytes, err := templatesDefaultRcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/default.rc", size: 230, mode: os.FileMode(0664), modTime: time.Unix(1609532582, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x62, 0x27, 0xff, 0x59, 0x43, 0x5a, 0xda, 0x73, 0xd6, 0x4a, 0x2a, 0x3b, 0x73, 0x24, 0xc, 0x6, 0x9, 0xe7, 0x98, 0xfb, 0x83, 0xf3, 0xec, 0x40, 0x88, 0x61, 0xc2, 0xf2, 0xba, 0x32, 0x5a, 0xf}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/config.yml":  templatesConfigYml,
	"templates/default.env": templatesDefaultEnv,
	"templates/default.rc":  templatesDefaultRc,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": {nil, map[string]*bintree{
		"config.yml": {templatesConfigYml, map[string]*bintree{}},
		"default.env": {templatesDefaultEnv, map[string]*bintree{}},
		"default.rc": {templatesDefaultRc, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
